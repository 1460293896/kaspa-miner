name: Build and upload assets
on:
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Build gnu-linux on ubuntu-18.04 and musl on ubuntu latest
        os: [ ubuntu-18.04, windows-latest, macos-latest ]
    name: Building, ${{ matrix.os }}
    steps:
      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install CUDA Linux
        if: runner.os == 'Linux'
        uses: tmrlvi/cuda-toolkit@master
        with:
          cuda: '11.2.2'

      - name: Install CUDA Windows
        if: runner.os == 'Windows'
        uses: tmrlvi/cuda-toolkit@master
        with:
          cuda: '11.5.1'

      - name: Build on Linux GNU
        if: matrix.os == 'ubuntu-18.04'
        # We're using musl to make the binaries statically linked and portable
        run: |
          cargo build --target=x86_64-unknown-linux-gnu --release --all
          asset_name="kaspa-miner-${{ github.event.release.tag_name }}-linux-gnu-amd64"
          strip ./target/x86_64-unknown-linux-gnu/release/kaspa-miner
          mkdir ${asset_name}
          mv ./target/x86_64-pc-windows-msvc/release/kaspa-miner ${asset_name}/${asset_name}
          mv ./target/x86_64-pc-windows-msvc/release/libkaspa*.so ${asset_name}/
          tar czvf ${asset_name}.tgz ${asset_name}
          echo "archive=${asset_name}.tgz" >> $GITHUB_ENV
          echo "asset_name=${asset_name}.tgz" >> $GITHUB_ENV


      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cargo build --target=x86_64-pc-windows-msvc --release --all
          asset_name="kaspa-miner-${{ github.event.release.tag_name }}-win64-amd64"
          mkdir ${asset_name}
          mv ./target/x86_64-pc-windows-msvc/release/kaspa-miner.exe ${asset_name}/${asset_name}.exe
          mv ./target/x86_64-pc-windows-msvc/release/kaspa*.dll ${asset_name}/
          zip -r ${asset_name}.zip ${asset_name}
          echo "archive=${asset_name}.zip" >> $GITHUB_ENV
          echo "asset_name=${asset_name}.zip" >> $GITHUB_ENV

      - name: Build on MacOS
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --target=x86_64-apple-darwin --release
          asset_name="kaspa-miner-${{ github.event.release.tag_name }}-osx-amd64"
          mv ./target/x86_64-apple-darwin/release/kaspa-miner ${asset_name}
          echo "archive=${asset_name}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV


      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ env.archive }}"
          asset_name: "${{ env.asset_name }}"
          asset_content_type: application/zip
